[{"/Users/Alan/Documents/JavaScript/deskpods/src/index.js":"1","/Users/Alan/Documents/JavaScript/deskpods/src/App.js":"2","/Users/Alan/Documents/JavaScript/deskpods/src/reportWebVitals.js":"3","/Users/Alan/Documents/JavaScript/deskpods/src/LoggedIn.js":"4","/Users/Alan/Documents/JavaScript/deskpods/src/LandingPage.js":"5","/Users/Alan/Documents/JavaScript/deskpods/src/Success.js":"6","/Users/Alan/Documents/JavaScript/deskpods/src/components/ShowCard.js":"7"},{"size":651,"mtime":1615482291799,"results":"8","hashOfConfig":"9"},{"size":846,"mtime":1615482291788,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611930693944,"results":"11","hashOfConfig":"9"},{"size":5092,"mtime":1615482291792,"results":"12","hashOfConfig":"9"},{"size":1292,"mtime":1615486310494,"results":"13","hashOfConfig":"9"},{"size":678,"mtime":1615482291793,"results":"14","hashOfConfig":"9"},{"size":695,"mtime":1615482291797,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"z2dtmz",{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},"/Users/Alan/Documents/JavaScript/deskpods/src/index.js",["35"],"/Users/Alan/Documents/JavaScript/deskpods/src/App.js",["36","37","38","39"],"import { SpotifyAuth, Scopes } from \"react-spotify-auth\";\nimport { SpotifyApiContext } from \"react-spotify-api\";\nimport \"react-spotify-auth/dist/index.css\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport Cookies from \"js-cookie\";\nimport { useHistory } from \"react-router-dom\";\n\nimport LandingPage from \"./LandingPage\";\nimport LoggedIn from \"./LoggedIn\";\n\nfunction App() {\n  const history = useHistory();\n  const token = Cookies.get(\"spotifyAuthToken\");\n  console.log(\"app history\", history);\n\n  return (\n    <div\n      className=\"app\"\n      class=\"--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(0, 0, 0, 0));\"\n    >\n      {token ? (\n        <LoggedIn history={history} token={token} />\n      ) : (\n        // Display the login page\n        <LandingPage />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",["40","41"],"/Users/Alan/Documents/JavaScript/deskpods/src/reportWebVitals.js",[],"/Users/Alan/Documents/JavaScript/deskpods/src/LoggedIn.js",["42","43","44","45","46"],"import React, { useState, useEffect } from \"react\";\nimport { SpotifyApiContext } from \"react-spotify-api\";\nimport ShowCard from \"./components/ShowCard\";\nimport { withRouter, Route, Switch } from \"react-router-dom\";\n\nimport Success from \"./Success\";\n\nconst axios = require(\"axios\");\n\nexport default function LoggedIn({ history, token }) {\n  const [subscribedPods, setSubscribedPods] = useState([]);\n  // const [showModal, setShowModal] = useState(false);\n  const [selectShows, setSelectShows] = useState([]);\n  const [userId, setUserId] = useState(\"\");\n\n  console.log(\"browser history\", history);\n\n  const axiosHeader = {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  };\n\n  const userHeader = {\n    headers: { Authorization: `Bearer ${token}` },\n  };\n\n  const grabUser = async () => {\n    const foundUser = await axios.get(\n      \"https://api.spotify.com/v1/me\",\n      userHeader\n    );\n    return foundUser.data;\n  };\n\n  const getSubscriptions = async () => {\n    const res = await axios.get(\n      \"https://api.spotify.com/v1/me/shows?limit=50\",\n      axiosHeader\n    );\n\n    const subscriptions = [];\n\n    res.data.items.forEach(async (pod) => {\n      subscriptions.push(pod.show);\n    });\n\n    console.log(\"users subscriptions\", subscriptions);\n    const currUser = await grabUser();\n    setUserId(currUser.id);\n    setSubscribedPods(subscriptions);\n  };\n\n  const createPlaylist = async (user_id) => {\n    let today = new Date();\n    const dd = String(today.getDate()).padStart(2, \"0\");\n    const mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    const yyyy = today.getFullYear();\n\n    today = mm + \"/\" + dd + \"/\" + yyyy;\n\n    const metaData = {\n      name: `Pods for ${today}`,\n      description: \"Latest podcasts from your subscriptions\",\n      public: false,\n    };\n\n    const newPlaylist = await axios.post(\n      `https://api.spotify.com/v1/users/${user_id}/playlists`,\n      metaData,\n      axiosHeader\n    );\n\n    console.log(newPlaylist);\n    return newPlaylist.data;\n  };\n\n  const grabLatest = async (pod) => {\n    const { id } = pod;\n    const episodes = [];\n    const res = await axios.get(\n      `https://api.spotify.com/v1/shows/${id}/episodes?limit=5`,\n      axiosHeader\n    );\n    console.log(res);\n    return res.data.items;\n  };\n\n  const addToPlaylist = async (playlist_id, episodes) => {\n    const convertURI = (uri) => {\n      return uri.split(\":\").join(\"%3A\");\n    };\n\n    let episodesAdded = [];\n    for (let i = 0; i < 50; i++) {\n      const currEp = convertURI(episodes[i].uri);\n\n      episodesAdded.push(currEp);\n    }\n    episodesAdded = episodesAdded.join(\"%2C\");\n\n    await axios.post(\n      `https://api.spotify.com/v1/playlists/${playlist_id}/tracks?uris=${episodesAdded}`,\n      {},\n      axiosHeader\n    );\n\n    console.log(\"added new episodes to playlist\");\n  };\n\n  const createUpdated = async () => {\n    const keptPods = subscribedPods.filter((show) => {\n      return !selectShows.includes(show.id);\n    });\n\n    let allEpisodes = [];\n\n    keptPods.map((show) => {\n      allEpisodes.push(grabLatest(show));\n    });\n\n    allEpisodes = await Promise.all(allEpisodes);\n\n    let flatList = [];\n    allEpisodes.forEach((list) => {\n      list.forEach((episode) => {\n        flatList.push(episode);\n      });\n    });\n    flatList.sort(\n      (a, b) => Date.parse(b.release_date) - Date.parse(a.release_date)\n    );\n\n    const newPlaylist = await createPlaylist(userId);\n    addToPlaylist(newPlaylist.id, flatList);\n\n    history.push(\"/success\");\n    // console.log(flatList);\n    // console.log(keptPods.length, keptPods);\n  };\n\n  useEffect(getSubscriptions, []);\n\n  // const openModal = () => setShowModal(true);\n  // const closeModal = () => setShowModal(false);\n\n  // console.log(subscribedPods);\n  // console.log(\"Selected\", selectShows);\n  return (\n    <div class=\"min-h-screen  bg-gradient-to-b from-purple-900 via-gray-500 to-green-400 ... \">\n      <Switch>\n        <Route path=\"/success\" component={Success} />\n        <SpotifyApiContext.Provider value={token}>\n          <h1 class=\"p-20 text-white text-7xl font-bold flex justify-center ... \">\n            Any shows you want to exlude?\n          </h1>\n          <div class=\"flex flex-wrap\">\n            {subscribedPods.map((show) => {\n              return (\n                <ShowCard\n                  name={show.name}\n                  id={show.id}\n                  thumbnail={show.images[2]}\n                  setSelectShows={setSelectShows}\n                  selectShows={selectShows}\n                />\n              );\n            })}\n          </div>\n          <div class=\"p-20 flex justify-center\">\n            <button\n              class=\"animate-bounce h-25 px-15 m-2 bg-gradient-to-r from-green-400 to-green-500 ... hover:bg-green-900 text-white font-bold py-2 px-4 rounded-full \"\n              onClick={createUpdated}\n            >\n              + Create Playlist\n            </button>\n          </div>\n        </SpotifyApiContext.Provider>\n      </Switch>\n    </div>\n  );\n}\n","/Users/Alan/Documents/JavaScript/deskpods/src/LandingPage.js",[],"/Users/Alan/Documents/JavaScript/deskpods/src/Success.js",["47","48"],"import React from \"react\";\nimport screenshot from \"./assets/new-playlist-screenshot.png\";\nimport redCircle from \"./assets/red-circle.gif\";\n\nexport default function Success() {\n  return (\n    <div>\n      <h1 class=\"p-20 text-white text-7xl font-bold flex justify-center text-center ... \">\n        Go ahead and check your spotify playlists!\n      </h1>\n\n      <div class=\"flex justify-center relative\">\n        <img\n          class=\"absolute top-5  rounded-lg shadow-2xl flex justify-center\"\n          src={screenshot}\n        />\n        <img\n          class=\"absolute  flex justify-center max-w-1/2\n          \"\n          src={redCircle}\n        />\n      </div>\n    </div>\n  );\n}\n","/Users/Alan/Documents/JavaScript/deskpods/src/components/ShowCard.js",["49","50"],"import { set } from \"js-cookie\";\nimport React from \"react\";\n\nexport default function ShowCard({\n  selectShows,\n  setSelectShows,\n  id,\n  name,\n  thumbnail,\n}) {\n  const checkOff = (e) => {\n    const { checked, name } = e.target;\n    if (checked) {\n      setSelectShows([...selectShows, name]);\n    } else {\n      setSelectShows(selectShows.filter((id) => id === name));\n    }\n  };\n\n  return (\n    <div class=\"sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 hover:bg-gray-300 p-3\">\n      <h1 class=\"text-white text-xl font-bold break-words  mx-auto\">{name}</h1>\n      <img class=\"mx-auto\" src={thumbnail.url} />\n      <input name={id} class=\"mx-auto\" type=\"checkbox\" onChange={checkOff} />\n    </div>\n  );\n}\n",{"ruleId":"51","severity":1,"message":"52","line":7,"column":8,"nodeType":"53","messageId":"54","endLine":7,"endColumn":21},{"ruleId":"51","severity":1,"message":"55","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":21},{"ruleId":"51","severity":1,"message":"56","line":1,"column":23,"nodeType":"53","messageId":"54","endLine":1,"endColumn":29},{"ruleId":"51","severity":1,"message":"57","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":27},{"ruleId":"51","severity":1,"message":"52","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":21},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"51","severity":1,"message":"62","line":4,"column":10,"nodeType":"53","messageId":"54","endLine":4,"endColumn":20},{"ruleId":"63","severity":1,"message":"64","line":38,"column":28,"nodeType":"65","endLine":54,"endColumn":4},{"ruleId":"51","severity":1,"message":"66","line":82,"column":11,"nodeType":"53","messageId":"54","endLine":82,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":120,"column":25,"nodeType":"65","messageId":"69","endLine":120,"endColumn":27},{"ruleId":"63","severity":1,"message":"70","line":144,"column":31,"nodeType":"71","endLine":144,"endColumn":33,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":13,"column":9,"nodeType":"75","endLine":16,"endColumn":11},{"ruleId":"73","severity":1,"message":"74","line":17,"column":9,"nodeType":"75","endLine":21,"endColumn":11},{"ruleId":"51","severity":1,"message":"76","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":23,"column":7,"nodeType":"75","endLine":23,"endColumn":50},"no-unused-vars","'SpotifyPlayer' is defined but never used.","Identifier","unusedVar","'SpotifyAuth' is defined but never used.","'Scopes' is defined but never used.","'SpotifyApiContext' is defined but never used.","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"'withRouter' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'episodes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'axiosHeader' and 'grabUser'. Either include them or remove the dependency array.","ArrayExpression",["79"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'set' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [axiosHeader, grabUser]",{"range":"82","text":"83"},[3705,3707],"[axiosHeader, grabUser]"]